import { config } from "@qnaplus/config";
import postgres from "postgres";

(async () => {
    const sql = postgres(config.getenv("SUPABASE_CONNECTION_STRING"), { prepare: false, connect_timeout: 60 });
    await sql`
    create table if not exists public.questions (
        id text not null,
        url text not null,
        program text not null,
        season text not null,
        author text not null,
        title text not null,
        question text not null,
        "questionRaw" text not null,
        answer text null,
        "answerRaw" text null,
        "askedTimestamp" text not null,
        "askedTimestampMs" numeric not null,
        "answeredTimestamp" text null,
        "answeredTimestampMs" numeric null,
        answered boolean not null,
        tags text[] not null,
        constraint questions_pkey primary key (id)
    ) tablespace pg_default;
    `;
    await sql`
    create table if not exists public.metadata (
        id bigint generated by default as identity not null,
        current_season text not null,
        oldest_unanswered_question text not null,
        constraint metadata_pkey primary key (id)
    ) tablespace pg_default;
   `;
    await sql`
    create table if not exists public.failures (
        id text not null,
        constraint failures.production_pkey primary key (id)
    ) tablespace pg_default;
   `;
    await sql`
    create table public.renotify_queue (
        id text not null,
        constraint renotify_queue_pkey primary key (id),
        constraint renotify_queue_id_fkey foreign key (id) references "questions" (id) on update cascade on delete cascade
    ) tablespace pg_default;
   `;
   await sql`
   create table public.answer_queue (
       id text not null,
       constraint answer_queue_pkey primary key (id),
       constraint answer_queue_id_fkey foreign key (id) references "questions" (id) on update cascade on delete cascade
   ) tablespace pg_default;
  `;
    await sql.end()
})();